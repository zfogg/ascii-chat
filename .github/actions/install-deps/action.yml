name: 'Install Dependencies'
description: 'Install and cache build dependencies for ASCII-Chat'
inputs:
  os:
    description: 'Operating system (ubuntu or macos)'
    required: true
  extra-packages:
    description: 'Additional packages to install (space-separated)'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Install and cache Homebrew packages (macOS)
      if: inputs.os == 'macos'
      uses: tecolicom/actions-use-homebrew-tools@v1
      with:
        tools: portaudio libsodium criterion ${{ inputs.extra-packages }}
        cache: yes

    - name: Install and cache APT packages (Ubuntu)
      if: inputs.os == 'ubuntu'
      uses: tecolicom/actions-use-apt-tools@v1
      with:
        tools: clang libv4l-dev zlib1g-dev portaudio19-dev libjack-jackd2-0 libjack-jackd2-dev libasound2-dev libboxfort-dev libsodium-dev libcriterion-dev libgit2-dev libnanomsg-dev libnanomsg5 libprotobuf-c-dev libprotobuf-c1 libprotobuf-dev libssl-dev libssh2-1-dev libhttp-parser-dev libpcre2-dev libpcre2-8-0 libkrb5-dev krb5-multidev libgssapi-krb5-2 libkrb5-3 libk5crypto3 libcom-err2 pkg-config ${{ inputs.extra-packages }}
        cache: yes

    - name: Debug available libraries (Ubuntu)
      if: inputs.os == 'ubuntu'
      shell: bash
      run: |
        echo "=== Checking test dependency libraries ==="

        # Check ssh
        echo "libssh2:"
        pkg-config --exists libssh2 && echo "✅ libssh2 found" || echo "❌ libssh2 not found"
        pkg-config --libs libssh2 2>/dev/null || echo "No libssh2 libs via pkg-config"

        # Check criterion
        echo "Criterion:"
        pkg-config --exists criterion && echo "✅ criterion found" || echo "❌ criterion not found"
        pkg-config --libs criterion 2>/dev/null || echo "No criterion libs via pkg-config"

        # Check libgit2
        echo "LibGit2:"
        pkg-config --exists libgit2 && echo "✅ libgit2 found" || echo "❌ libgit2 not found"

        # Check nanomsg
        echo "Nanomsg:"
        pkg-config --exists nanomsg && echo "✅ nanomsg found" || echo "❌ nanomsg not found"
        find /usr/lib/x86_64-linux-gnu/ -name "*nanomsg*" || echo "No nanomsg libs found"

        # Check boxfort
        echo "Boxfort:"
        find /usr/lib/x86_64-linux-gnu/ -name "*boxfort*" || echo "No boxfort libs found"

        # Check JACK libraries are properly linked
        echo "=== Checking JACK installation ==="
        ls -la /usr/lib/x86_64-linux-gnu/ | grep jack || echo "No JACK libs found"

        # Try to fix broken symlinks if they exist
        sudo ldconfig

        # Verify pkg-config can find jack
        echo "=== Testing pkg-config for jack ==="
        if pkg-config --exists jack; then
          echo "✅ pkg-config found jack"
          pkg-config --libs --cflags jack
        else
          echo "❌ pkg-config cannot find jack"
          echo "Available .pc files:"
          find /usr/lib/x86_64-linux-gnu/pkgconfig/ -name "*jack*" || echo "No jack .pc files"
        fi

    - name: Set up build environment (macOS)
      if: inputs.os == 'macos'
      shell: bash
      run: |
        export PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig:/opt/homebrew/share/pkgconfig
        export CPPFLAGS=-I/opt/homebrew/include
        export LDFLAGS=-L/opt/homebrew/lib

        export PKG_CONFIG_LIBS=portaudio-2.0 criterion zlib

        # Set up pkg-config path for Homebrew packages (always needed)
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "CPPFLAGS=$CPPFLAGS" >> $GITHUB_ENV
        echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV
        echo "PKG_CONFIG_LIBS=$PKG_CONFIG_LIBS" >> $GITHUB_ENV

        # Verify they will be set for subsequent steps
        echo "Set PKG_CONFIG_PATH to $PKG_CONFIG_PATH"
        echo "Set CPPFLAGS to $CPPFLAGS"
        echo "Set LDFLAGS to $LDFLAGS"

        # Debug: Check if pkg-config can find portaudio immediately after setting env vars
        echo "Debug: Testing pkg-config with PKG_CONFIG_PATH and PKG_CONFIG_LIBS..."
        pkg-config --libs --cflags "$PKG_CONFIG_LIBS"

        # Debug: Check if .pc files exist
        echo "Debug: Checking .pc files existence..."
        for lib in $PKG_CONFIG_LIBS; do
          ls -la /opt/homebrew/lib/pkgconfig/"$lib".pc || (
            echo "ERROR: No $lib .pc files in /opt/homebrew/lib/pkgconfig/"
            exit 1
          )
        done
