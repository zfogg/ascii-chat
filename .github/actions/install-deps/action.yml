name: 'Install Dependencies'
description: 'Install and cache build dependencies for ASCII-Chat'
inputs:
  os:
    description: 'Operating system (ubuntu or macos)'
    required: true
  extra-packages:
    description: 'Additional packages to install (space-separated)'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Install and cache Homebrew packages (macOS)
      if: inputs.os == 'macos'
      uses: tecolicom/actions-use-homebrew-tools@v1
      with:
        tools: portaudio libsodium criterion coreutils make ${{ inputs.extra-packages }}
        cache: yes

    - name: Install and cache APT packages (Ubuntu)
      if: inputs.os == 'ubuntu'
      uses: tecolicom/actions-use-apt-tools@v1
      with:
        tools: clang libv4l-dev zlib1g-dev portaudio19-dev libjack-jackd2-0 libjack-jackd2-dev libasound2-dev libboxfort-dev libsodium-dev libcriterion-dev libgit2-dev libnanomsg-dev libnanomsg5 libprotobuf-c-dev libprotobuf-c1 libprotobuf-dev libssl-dev libssh2-1-dev libhttp-parser-dev libpcre2-dev libpcre2-8-0 libkrb5-dev krb5-multidev libgssapi-krb5-2 libkrb5-3 libk5crypto3 libcom-err2 libnanopb-dev pkg-config libxml2-utils python3-pip llvm ${{ inputs.extra-packages }}
        cache: yes

    - name: Set CSDT env var
      shell: bash
      run: |
        # Setup CSTD
        export CSTD=c2x
        echo "CSTD=$CSTD" >> $GITHUB_ENV
        echo "Set CSTD to $CSTD"

    - name: Set up build environment (macOS)
      if: inputs.os == 'macos'
      shell: bash
      run: |
        # NOTE: `brew info make` says "make" is installed as "gmake", but they give us gnubin
        export PATH="/usr/local/opt/make/libexec/gnubin:$PATH"

        export PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig:/opt/homebrew/share/pkgconfig
        export CPPFLAGS=-I/opt/homebrew/include
        export LDFLAGS=-L/opt/homebrew/lib

        export PKG_CONFIG_LIBS=portaudio-2.0 criterion zlib

        # Set up PATH
        echo "PATH=$PATH" >> $GITHUB_ENV

        # Set up pkg-config path for Homebrew packages (always needed)
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "CPPFLAGS=$CPPFLAGS" >> $GITHUB_ENV
        echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV
        echo "PKG_CONFIG_LIBS=$PKG_CONFIG_LIBS" >> $GITHUB_ENV

        # Verify they will be set for subsequent steps
        echo "Set PKG_CONFIG_PATH to $PKG_CONFIG_PATH"
        echo "Set CPPFLAGS to $CPPFLAGS"
        echo "Set LDFLAGS to $LDFLAGS"

        # Debug: Check if pkg-config can find portaudio immediately after setting env vars
        echo "Debug: Testing pkg-config with PKG_CONFIG_PATH and PKG_CONFIG_LIBS..."
        pkg-config --libs --cflags "$PKG_CONFIG_LIBS"

        # Debug: Check if .pc files exist
        echo "Debug: Checking .pc files existence..."
        for lib in $PKG_CONFIG_LIBS; do
          ls -la /opt/homebrew/lib/pkgconfig/"$lib".pc || (
            echo "ERROR: No $lib .pc files in /opt/homebrew/lib/pkgconfig/"
            exit 1
          )
        done

        # Configure clang to work without Command Line Tools
        # This allows Homebrew LLVM to find the macOS SDK
        mkdir -p ~/.config/clang

        # Get Darwin version for config filename
        DARWIN_VERSION=$(uname -r | cut -d. -f1)
        SDK_PATH=$(xcrun --show-sdk-path 2>/dev/null || echo "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk")

        # Create x86_64 config
        cat > ~/.config/clang/x86_64-apple-darwin${DARWIN_VERSION}.cfg << EOF
        # Clang configuration for x86_64 macOS
        -isysroot ${SDK_PATH}
        -isystem ${SDK_PATH}/usr/include
        -stdlib=libc++
        -resource-dir /usr/local/opt/llvm/lib/clang/21
        EOF

        # Create ARM64 config
        cat > ~/.config/clang/arm64-apple-darwin${DARWIN_VERSION}.cfg << EOF
        # Clang configuration for ARM64 macOS
        -isysroot ${SDK_PATH}
        -isystem ${SDK_PATH}/usr/include
        -stdlib=libc++
        -resource-dir /usr/local/opt/llvm/lib/clang/21
        EOF

        echo "Created clang config files for darwin${DARWIN_VERSION}"
        ls -la ~/.config/clang/
