name: 'Generate Coverage Report'
description: 'Generate coverage files with safe names for codecov upload'

inputs:
  build-type:
    description: 'Build type (debug, release, etc.)'
    required: true
    default: 'debug'
  os-name:
    description: 'OS name for logging'
    required: true
    default: 'unknown'
  test-type:
    description: 'Type of test (unit, integration, performance)'
    required: true
    default: 'unit'
  codecov-token:
    description: 'Codecov token for uploading coverage'
    required: false
    default: ''
  upload-coverage:
    description: 'Whether to upload coverage to Codecov'
    required: false
    default: 'false'
  junit-file:
    description: 'Path to JUnit XML file for upload'
    required: false
    default: 'junit.xml'

runs:
  using: 'composite'
  steps:
    - name: Generate coverage report
      id: generate-coverage
      if: always()
      shell: bash
      run: |
        echo "Looking for .gcda files to generate coverage from..."
        gcda_files=$(find . -name "*.gcda" -type f 2>/dev/null)
        gcda_files_count=$(echo "$gcda_files" | wc -l | sed 's/ //g')
        echo "üôà Generating coverage with ${gcda_files_count} gcda files with safe names..."

        if [ -n "$gcda_files" ]; then
            echo "‚úÖ Successfully found $gcda_files_count gcda files"
        else
            echo "‚ùå ERROR: No gcda files found" >&2 && false
            echo 1 || exit 1
        fi


         # Process each .gcda file
         find . -name "*.gcda" -type f | while read -r gcda_file; do
             gcda_dir=$(dirname "$gcda_file")
             base_name=$(basename "$gcda_file" .gcda)

             (cd "$gcda_dir" && gcov "$(basename "$gcda_file")" >/dev/null 2>&1)

             # Move ALL .gcov files generated in this directory to root with safe names
             find "$gcda_dir" -name "*.gcov" -type f | while read -r gcov_file; do
                 gcov_base=$(basename "$gcov_file" .gcov)
                 safe_name=$(echo "$gcda_dir/$gcov_base" | sed "s|^\./||" | sed "s|/|_|g")
                 mv "$gcov_file" "./$safe_name.gcov"
                 echo "Generated $gcda_file -> $safe_name.gcov"
             done
         done

        gcov_files=$(find . -name "*.gcov" -type f 2>/dev/null)
        gcov_files_count=$(echo "$gcov_files" | wc -l | sed 's/ //g')
        echo "üôà Generated coverage with $gcov_files_count gcov files with safe names..."

         echo "üî† Validating coverage file generation..."
         if [ -n "$gcov_files" ] && [ $gcov_files_count -ge $gcda_files_count ]; then
             echo "‚úÖ Successfully generated and copied $gcov_files_count coverage files (expected at least $gcda_files_count)"
             # Output the list of generated .gcov files for use in upload step
             echo "gcov-files<<EOF" >> $GITHUB_OUTPUT
             echo "$gcov_files" >> $GITHUB_OUTPUT
             echo "EOF" >> $GITHUB_OUTPUT
             echo "üì§ Output gcov-files to GITHUB_OUTPUT completed"
         else
             echo "‚ùå ERROR: No gcov files or insufficient gcov files found after generation and copying\!" >&2
             echo "Expected at least $gcda_files_count files, but found $gcov_files_count" >&2
             echo 1 || exit 1
         fi

         echo "üèÅ Generation step completed successfully"

    # Check if coverage files exist before uploading
    - name: Check Coverage Files
      id: check-coverage
      if: ${{ always() && inputs.upload-coverage == 'true' }}
      shell: bash
      run: |
        echo "üîç Checking for coverage files..."
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la . | head -20

        gcov_files=$(find . -name "*.gcov" -type f 2>/dev/null)
        gcov_files_count=$(echo "$gcov_files" | wc -l | sed 's/ //g')

        echo "Found $gcov_files_count .gcov files"
        if [ -n "$gcov_files" ]; then
          echo "Files found:"
          echo "$gcov_files" | head -10
        fi

        if [ -n "$gcov_files" ] && [ $gcov_files_count -gt 0 ]; then
          echo "‚úÖ Found $gcov_files_count coverage files"
          echo "has_coverage=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è No coverage files found"
          echo "has_coverage=false" >> $GITHUB_OUTPUT
          echo "This may be expected for non-coverage builds (e.g., regular debug vs debug-coverage)"
        fi

    # Debug upload conditions
    - name: Debug Upload Conditions
      if: always()
      shell: bash
      run: |
        echo "üîç Debugging upload conditions..."
        echo "inputs.upload-coverage: '${{ inputs.upload-coverage }}'"
        echo "inputs.codecov-token: '${{ inputs.codecov-token }}'"
        echo "steps.check-coverage.outputs.has_coverage: '${{ steps.check-coverage.outputs.has_coverage }}'"
        echo "Condition evaluation:"
        echo "  always(): true"
        echo "  inputs.upload-coverage == 'true': ${{ inputs.upload-coverage == 'true' }}"
        echo "  Combined condition: ${{ always() && inputs.upload-coverage == 'true' }}"

    # Upload coverage to Codecov (optional)
    - name: Upload Coverage to Codecov
      if: ${{ always() && inputs.upload-coverage == 'true' }}
      shell: bash
      run: |
        echo "üöÄ Starting Codecov upload..."
        echo "Upload coverage: ${{ inputs.upload-coverage }}"
        echo "Check coverage output: ${{ steps.check-coverage.outputs.has_coverage }}"
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la . | head -20

        # Check if .gcov files exist
        gcov_files=$(find . -name "*.gcov" -type f 2>/dev/null)
        gcov_count=$(echo "$gcov_files" | wc -l | sed 's/ //g')
        echo "Found $gcov_count .gcov files for upload"

        if [ $gcov_count -gt 0 ]; then
          echo "‚úÖ Proceeding with Codecov upload"
          echo "Files to upload:"
          echo "$gcov_files"

          # Convert the file list to a format that codecov can use
          # Replace newlines with spaces for the files parameter
          files_list=$(echo "$gcov_files" | tr '\n' ' ')
          echo "Files list for upload: $files_list"

          # Use codecov CLI directly for more control
          codecov --token="${{ inputs.codecov-token }}" \
                  --files="$files_list" \
                  --flags="${{ inputs.test-type == 'unit' && format('ascii-chat-tests-{0}-{1}', inputs.os-name, inputs.build-type) || inputs.test-type == 'integration' && format('ascii-chat-integration-{0}', inputs.os-name) || format('ascii-chat-performance-{0}', inputs.os-name) }}" \
                  --name="${{ inputs.test-type == 'unit' && format('ascii-chat-coverage-{0}-{1}', inputs.os-name, inputs.build-type) || inputs.test-type == 'integration' && format('ascii-chat-integration-coverage-{0}', inputs.os-name) || format('ascii-chat-performance-coverage-{0}', inputs.os-name) }}" \
                  --fail_ci_if_error=true \
                  --verbose
        else
          echo "‚ö†Ô∏è No .gcov files found, skipping upload"
        fi

    # Upload JUnit XML to Codecov
    - name: Upload JUnit XML to Codecov
      if: always() && inputs.upload-coverage == 'true'
      shell: bash
      run: |
        echo "üìä Uploading JUnit XML to Codecov..."
        echo "JUnit file: ${{ inputs.junit-file }}"

        if [ -f "${{ inputs.junit-file }}" ]; then
          echo "‚úÖ JUnit XML file found, uploading to Codecov"

          # Upload JUnit XML using codecov CLI
          codecov --token="${{ inputs.codecov-token }}" \
                  --files="${{ inputs.junit-file }}" \
                  --flags="${{ inputs.test-type == 'unit' && format('ascii-chat-tests-{0}-{1}', inputs.os-name, inputs.build-type) || inputs.test-type == 'integration' && format('ascii-chat-integration-{0}', inputs.os-name) || format('ascii-chat-performance-{0}', inputs.os-name) }}" \
                  --name="${{ inputs.test-type == 'unit' && format('ascii-chat-test-results-{0}-{1}', inputs.os-name, inputs.build-type) || inputs.test-type == 'integration' && format('ascii-chat-integration-test-results-{0}', inputs.os-name) || format('ascii-chat-performance-test-results-{0}', inputs.os-name) }}" \
                  --fail_ci_if_error=true \
                  --verbose
        else
          echo "‚ö†Ô∏è JUnit XML file not found at ${{ inputs.junit-file }}, skipping upload"
        fi

