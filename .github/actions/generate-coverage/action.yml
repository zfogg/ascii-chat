name: 'Generate Coverage Report'
description: 'Generate coverage files with safe names for codecov upload'

inputs:
  build-type:
    description: 'Build type (debug, release, etc.)'
    required: true
    default: 'debug'
  os-name:
    description: 'OS name for logging'
    required: true
    default: 'unknown'
  test-type:
    description: 'Type of test (unit, integration, performance)'
    required: true
    default: 'unit'
  codecov-token:
    description: 'Codecov token for uploading coverage'
    required: false
    default: ''
  upload-coverage:
    description: 'Whether to upload coverage to Codecov'
    required: false
    default: 'false'
  junit-file:
    description: 'Path to JUnit XML file for upload'
    required: false
    default: 'junit.xml'

runs:
  using: 'composite'
  steps:
    - name: Install codecov CLI
      if: ${{ inputs.upload-coverage == 'true' }}
      shell: bash
      run: |
        echo "üì¶ Installing codecov CLI..."
        if command -v pip3 >/dev/null 2>&1; then
          pip3 install codecov-cli
        elif command -v pip >/dev/null 2>&1; then
          pip install codecov-cli
        else
          echo "‚ùå Neither pip3 nor pip found. Installing pip first..."
          if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python3 get-pip.py
            pip3 install codecov-cli
          else
            # Linux
            sudo apt-get update && sudo apt-get install -y python3-pip
            pip3 install codecov-cli
          fi
        fi
        echo "‚úÖ codecov CLI installed successfully"
        codecov --version

    - name: Generate coverage report
      id: generate-coverage
      if: always()
      shell: bash
      run: |
        echo "Looking for .gcda files to generate coverage from..."
        gcda_files=$(find . -name "*.gcda" -type f 2>/dev/null)
        gcda_files_count=$(echo "$gcda_files" | wc -l | sed 's/ //g')
        echo "Generating coverage with ${gcda_files_count} gcda files..."
        echo "Found .gcda files:"
        echo "$gcda_files" | head -10
        if [ $gcda_files_count -gt 10 ]; then
            echo "... and $((gcda_files_count - 10)) more files"
        fi

        # For clang, we should use llvm-cov instead of gcov
        if command -v llvm-cov >/dev/null 2>&1; then
            COVERAGE_CMD="llvm-cov gcov"
        else
            COVERAGE_CMD="gcov"
        fi

        if [ -n "$gcda_files" ]; then
            echo "‚úÖ Found $gcda_files_count gcda files"
        else
            echo "‚ùå ERROR: No gcda files found" >&2
            exit 1
        fi

        # Process each .gcda file
        processed_count=0
        failed_count=0

        for gcda_file in $(find . -name "*.gcda" -type f); do
            gcda_dir=$(dirname "$gcda_file")
            base_name=$(basename "$gcda_file" .gcda)

            echo "Processing $gcda_file"

            # Run gcov from project root with full path to gcda file
            # This allows gcov to find source files using the paths stored in the .gcno files
            if $COVERAGE_CMD "$gcda_file" 2>&1; then
                processed_count=$((processed_count + 1))
                echo "‚úÖ Successfully processed $gcda_file"
            else
                failed_count=$((failed_count + 1))
                echo "‚ö†Ô∏è Failed to process $gcda_file (this may be normal for system files)"
            fi

            # Move ALL .gcov files generated in this directory to root with safe names
            for gcov_file in $(find "$gcda_dir" -name "*.gcov" -type f); do
                gcov_base=$(basename "$gcov_file" .gcov)
                safe_name=$(echo "$gcda_dir/$gcov_base" | sed "s|^\./||" | sed "s|/|_|g")
                \mv "$gcov_file" "./$safe_name.gcov"
                echo "Generated $gcda_file -> $safe_name.gcov"
            done
        done

        echo "Processed $processed_count files successfully, $failed_count failed"

        gcov_files=$(find . -name "*.gcov" -type f 2>/dev/null)
        gcov_files_count=$(echo "$gcov_files" | wc -l | sed 's/ //g')
        echo "Generated $gcov_files_count coverage files..."

        # Calculate minimum expected files (allow for some files to not generate coverage)
        min_expected=$((gcda_files_count * 80 / 100))  # Expect at least 80% of gcda files to generate gcov

        if [ -n "$gcov_files" ] && [ $gcov_files_count -ge $min_expected ]; then
            echo "‚úÖ Successfully generated $gcov_files_count coverage files (expected at least $min_expected)"
            # Output the list of generated .gcov files for use in upload step
            echo "gcov-files<<EOF" >> $GITHUB_OUTPUT
            echo "$gcov_files" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
        else
            echo "‚ùå ERROR: No gcov files or insufficient gcov files found" >&2
            echo "Expected at least $min_expected files, but found $gcov_files_count" >&2
            echo "Total .gcda files: $gcda_files_count" >&2
            exit 1
        fi

    - name: Check Coverage Files
      id: check-coverage
      if: ${{ inputs.upload-coverage == 'true' }}
      shell: bash
      run: |
        gcov_files=$(find . -name "*.gcov" -type f 2>/dev/null)
        gcov_files_count=$(echo "$gcov_files" | wc -l | sed 's/ //g')

        if [ -n "$gcov_files" ] && [ $gcov_files_count -gt 0 ]; then
          echo "‚úÖ Found $gcov_files_count coverage files"
          echo "has_coverage=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è No coverage files found"
          echo "has_coverage=false" >> $GITHUB_OUTPUT
        fi


    - name: Upload Coverage to Codecov
      if: ${{ inputs.upload-coverage == 'true' }}
      shell: bash
      run: |
        echo "Uploading coverage to Codecov..."

        # Check if .gcov files exist
        gcov_files=$(find . -name "*.gcov" -type f 2>/dev/null)
        gcov_count=$(echo "$gcov_files" | wc -l | sed 's/ //g')

        if [ $gcov_count -gt 0 ]; then
          echo "‚úÖ Uploading $gcov_count coverage files"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "PR: ${{ github.event.pull_request.number }}"

          # Build codecov command with multiple --file arguments
          codecov_cmd="codecov do-upload --token=\"${{ inputs.codecov-token }}\""

          # Add repository and commit information
          codecov_cmd="$codecov_cmd --slug=\"${{ github.repository }}\""
          codecov_cmd="$codecov_cmd --sha=\"${{ github.sha }}\""
          codecov_cmd="$codecov_cmd --branch=\"${{ github.ref_name }}\""
          codecov_cmd="$codecov_cmd --pr=\"${{ github.event.pull_request.number }}\""

          # Add each file as a separate --file argument
          for file in $gcov_files; do
            codecov_cmd="$codecov_cmd --file=\"$file\""
          done

          # Add other arguments
          codecov_cmd="$codecov_cmd --flag=\"${{ inputs.test-type == 'unit' && format('ascii-chat-tests-{0}-{1}', inputs.os-name, inputs.build-type) || inputs.test-type == 'integration' && format('ascii-chat-integration-{0}', inputs.os-name) || format('ascii-chat-performance-{0}', inputs.os-name) }}\""
          codecov_cmd="$codecov_cmd --name=\"${{ inputs.test-type == 'unit' && format('ascii-chat-coverage-{0}-{1}', inputs.os-name, inputs.build-type) || inputs.test-type == 'integration' && format('ascii-chat-integration-coverage-{0}', inputs.os-name) || format('ascii-chat-performance-coverage-{0}', inputs.os-name) }}\""
          codecov_cmd="$codecov_cmd --fail-on-error"

          eval $codecov_cmd
        else
          echo "‚ö†Ô∏è No .gcov files found, skipping upload"
        fi

    - name: Upload JUnit XML to Codecov
      if: ${{ inputs.upload-coverage == 'true' }}
      shell: bash
      run: |
        echo "Uploading JUnit XML to Codecov..."

        if [ -f "${{ inputs.junit-file }}" ]; then
          echo "‚úÖ Uploading JUnit XML file"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "PR: ${{ github.event.pull_request.number }}"

          # Upload JUnit XML using codecov CLI
          codecov do-upload --token="${{ inputs.codecov-token }}" \
                  --slug="${{ github.repository }}" \
                  --sha="${{ github.sha }}" \
                  --branch="${{ github.ref_name }}" \
                  --pr="${{ github.event.pull_request.number }}" \
                  --file="${{ inputs.junit-file }}" \
                  --report-type=test_results \
                  --flag="${{ inputs.test-type == 'unit' && format('ascii-chat-tests-{0}-{1}', inputs.os-name, inputs.build-type) || inputs.test-type == 'integration' && format('ascii-chat-integration-{0}', inputs.os-name) || format('ascii-chat-performance-{0}', inputs.os-name) }}" \
                  --name="${{ inputs.test-type == 'unit' && format('ascii-chat-test-results-{0}-{1}', inputs.os-name, inputs.build-type) || inputs.test-type == 'integration' && format('ascii-chat-integration-test-results-{0}', inputs.os-name) || format('ascii-chat-performance-test-results-{0}', inputs.os-name) }}" \
                  --fail-on-error
        else
          echo "‚ö†Ô∏è JUnit XML file not found, skipping upload"
        fi
