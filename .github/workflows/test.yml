name: Test Suite

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.c'
      - '**.h'
      - '**.m'
      - 'tests/**'
      - 'Makefile'
  pull_request:
    branches: [ '*' ]
    paths:
      - '**.c'
      - '**.h'
      - '**.m'
      - 'tests/**'
      - 'Makefile'

jobs:
  unit-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]
        build_type: [debug, release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ${{ startsWith(matrix.os, 'ubuntu') && 'ubuntu' || 'macos' }}

    - name: Build test suite (${{ matrix.build_type }})
      run: |
        make -j CSTD=c2x ${{ matrix.build_type }}
        make -j CSTD=c2x tests

    - name: Run unit tests
      run: |
        make test-unit
        echo "Unit tests completed successfully"

    - name: Run integration tests
      if: matrix.build_type == 'release'
      run: |
        make test-integration
        echo "Integration tests completed successfully"

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ runner.os }}-${{ matrix.build_type }}
        path: |
          bin/test_*
          *.log
        retention-days: 7

  performance-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ${{ startsWith(matrix.os, 'ubuntu') && 'ubuntu' || 'macos' }}

    - name: Build performance tests
      run: |
        make -j CSTD=c2x release
        make -j CSTD=c2x tests

    - name: Run performance tests
      run: |
        make test-performance
        echo "Performance tests completed successfully"

  memory-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ubuntu
        extra-packages: valgrind

    - name: Build with AddressSanitizer
      run: |
        make -j CSTD=c2x sanitize
        make -j CSTD=c2x tests

    - name: Run tests with AddressSanitizer
      run: |
        # Run tests with AddressSanitizer to detect memory issues
        make test-quiet
        echo "AddressSanitizer tests completed successfully"

    - name: Memory leak detection
      run: |
        # Additional memory leak checks
        echo "Running memory leak detection..."
        # Test basic binary functionality for leaks
        timeout 10s valgrind --leak-check=full --error-exitcode=1 ./bin/server || true
        timeout 10s valgrind --leak-check=full --error-exitcode=1 ./bin/client || true
        echo "Memory leak detection completed"

  functional-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ${{ startsWith(matrix.os, 'ubuntu') && 'ubuntu' || 'macos' }}
        extra-packages: ${{ startsWith(matrix.os, 'macos') && 'coreutils' || '' }}

    - name: Build project
      run: |
        make -j CSTD=c2x debug

    - name: Test server startup and shutdown
      env:
        TERM: xterm-256color
      run: |
        # Set TERM for terminal detection in CI environment
        # Test server help (doesn't require terminal setup)
        ./bin/server --help
        # Test basic server startup (short timeout)
        timeout 2s ./bin/server --log-file /tmp/server_test.log || true
        echo "Server startup test passed"

    - name: Test client functionality
      env:
        TERM: xterm-256color
      run: |
        # Test client help (doesn't require webcam)
        ./bin/client --help
        # Test client capabilities detection
        ./bin/client --show-capabilities
        echo "Client functionality tests passed"

  benchmarks:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ${{ startsWith(matrix.os, 'ubuntu') && 'ubuntu' || 'macos' }}

    - name: Build project
      run: |
        cd todo
        make -j CSTD=c2x

    - name: Run benchmarks
      run: |
        cd todo
        ./ascii_simd_test --img-files imgs | tee output.log

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-simd-results-${{ runner.os }}-${{ matrix.build_type }}
        path: |
          todo/output.log
        retention-days: 7
