name: Test Suite

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.c'
      - '**.h'
      - '**.m'
      - 'tests/**'
      - 'Makefile'
  pull_request:
    branches: [ '*' ]
    paths:
      - '**.c'
      - '**.h'
      - '**.m'
      - 'tests/**'
      - 'Makefile'

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]
        build_type: [debug, release]
        include:
          - os: ubuntu-latest
            os-name: ubuntu
          - os: macos-15
            os-name: macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ${{ matrix.os-name }}
        extra-packages: ${{ matrix.os-name == 'ubuntu' && 'lcov gcovr libc6-dbg' || 'gcovr' }}

    - name: Build test suite (${{ matrix.build_type }})
      run: |
        # Use coverage for debug builds to enable coverage
        BUILD_TARGET=${{ matrix.build_type == 'debug' && 'coverage' || matrix.build_type }}
        echo "Building with target: ${BUILD_TARGET}"
        make -j CSTD=c2x ${BUILD_TARGET}
        make -j CSTD=c2x tests-${BUILD_TARGET}
        echo "Test executables built:"
        ls -la bin/test_* 2>/dev/null || echo "No test executables found in bin/"
        echo "All files in bin:"
        ls -la bin/ 2>/dev/null || echo "bin/ directory not found"

    - name: Run unit tests with JUnit XML generation
      run: |
        # Use coverage for debug builds
        BUILD_TARGET=${{ matrix.build_type == 'debug' && 'coverage' || matrix.build_type }}
        echo "Running tests with build type: ${BUILD_TARGET}"
        echo "Looking for test executables:"
        find . -name "test_unit_*" -type f 2>/dev/null | head -10
        # Save logs with descriptive filename
        LOG_FILE="unit-tests-${{ matrix.os-name }}-${{ matrix.build_type }}.log"
        ./tests/scripts/run_tests.sh -t unit -b ${BUILD_TARGET} -J --log-file="${LOG_FILE}"
        echo "Unit tests completed successfully"
        echo "Test logs saved to: ${LOG_FILE}"

    - name: Generate coverage report (debug builds only)
      if: always() && matrix.build_type == 'debug'
      run: |
        # Generate coverage files for codecov (coverage builds create .gcda files)
        echo "Looking for .gcda files to generate coverage from..."
        find . -name "*.gcda" -type f | head -10

        if find . -name "*.gcda" -type f | head -1 > /dev/null 2>&1; then
          echo "Found .gcda files, generating coverage..."
          echo "DEBUG: Running gcov on .gcda files..."
          find . -name "*.gcda" -exec gcov {} \;
          echo "DEBUG: gcov command completed"

          # Debug: Check where .gcov files were created
          echo "DEBUG: Looking for .gcov files after gcov execution..."
          echo "DEBUG: All .gcov files found:"
          find . -name "*.gcov" -type f -exec ls -la {} \;
          echo "DEBUG: Count of .gcov files: $(find . -name "*.gcov" -type f | wc -l)"

          # Move all .gcov files to repo root for consistent behavior across platforms
          echo "Moving .gcov files to repo root..."
          echo "DEBUG: Before move - .gcov files in root: $(ls -la *.gcov 2>/dev/null | wc -l || echo 0)"
          find . -name "*.gcov" -type f -exec mv {} . \; || false
          echo "DEBUG: Move command completed"

          # Show what coverage files were generated
          echo "Generated coverage files:"
          echo "DEBUG: After move - .gcov files in root: $(ls -la *.gcov 2>/dev/null | wc -l || echo 0)"
          find . -name "*.gcov" -type f | head -20
          ls -la *.gcov 2>/dev/null
        else
          echo "No .gcda files found (this is expected for non-coverage builds)"
        fi

    - name: Publish Test Results and Coverage
      uses: ./.github/actions/publish-test-results
      if: always()
      with:
        test-type: unit
        os-name: ${{ matrix.os-name }}
        build-type: ${{ matrix.build_type }}
        junit-file: junit.xml
        coverage-files: './*.gcov'
        codecov-token: ${{ secrets.CODECOV_TOKEN }}
        upload-coverage: ${{ matrix.build_type == 'debug' && 'true' || 'false' }}

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ runner.os }}-${{ matrix.build_type }}
        path: |
          junit.xml
          unit-tests-*.log
          tests.log
        retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]
        include:
          - os: ubuntu-latest
            os-name: ubuntu
          - os: macos-15
            os-name: macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ${{ matrix.os-name }}
        extra-packages: ${{ matrix.os-name == 'ubuntu' && 'lcov gcovr' || 'gcovr' }}

    - name: Build and run integration tests with coverage
      run: |
        echo "Running integration tests with coverage build..."
        make -j CSTD=c2x coverage
        make -j CSTD=c2x tests-coverage
        LOG_FILE="integration-tests-${{ matrix.os-name }}.log"
        ./tests/scripts/run_tests.sh -t integration -b coverage -J --log-file="${LOG_FILE}"
        echo "Integration tests completed successfully"
        echo "Test logs saved to: ${LOG_FILE}"

    - name: Generate coverage report
      if: always()
      run: |
        # Generate coverage files for codecov
        echo "DEBUG: Running gcov on .gcda files..."
        find . -name "*.gcda" -exec gcov {} \;
        echo "DEBUG: gcov command completed"

        # Debug: Check where .gcov files were created
        echo "DEBUG: Looking for .gcov files after gcov execution..."
        echo "DEBUG: All .gcov files found:"
        find . -name "*.gcov" -type f -exec ls -la {} \;
        echo "DEBUG: Count of .gcov files: $(find . -name "*.gcov" -type f | wc -l)"

        # Move all .gcov files to repo root for consistent behavior across platforms
        echo "Moving .gcov files to repo root..."
        echo "DEBUG: Before move - .gcov files in root: $(ls -la *.gcov 2>/dev/null | wc -l || echo 0)"
        find . -name "*.gcov" -type f -exec mv {} . \;
        echo "DEBUG: Move command completed"

        echo "Generated coverage files:"
        echo "DEBUG: After move - .gcov files in root: $(ls -la *.gcov 2>/dev/null | wc -l || echo 0)"
        find . -name "*.gcov" -type f | head -20

    - name: Publish Test Results and Coverage
      uses: ./.github/actions/publish-test-results
      if: always()
      with:
        test-type: integration
        os-name: ${{ matrix.os-name }}
        junit-file: junit.xml
        coverage-files: './*.gcov'
        codecov-token: ${{ secrets.CODECOV_TOKEN }}
        upload-coverage: 'true'

    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-${{ runner.os }}
        path: |
          junit.xml
          integration-tests-*.log
          tests.log
        retention-days: 7

  performance-tests:
    name: Performance Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ${{ startsWith(matrix.os, 'ubuntu') && 'ubuntu' || 'macos' }}

    - name: Build and run performance tests
      run: |
        # Build and run performance tests with release mode for accurate performance
        make -j CSTD=c2x release
        make -j CSTD=c2x tests-release
        LOG_FILE="performance-tests-${{ startsWith(matrix.os, 'ubuntu') && 'ubuntu' || 'macos' }}.log"
        ./tests/scripts/run_tests.sh -t performance -b release -J --log-file="${LOG_FILE}"
        echo "Performance tests completed successfully"
        echo "Test logs saved to: ${LOG_FILE}"

    - name: Publish Test Results
      uses: ./.github/actions/publish-test-results
      if: always()
      with:
        test-type: performance
        os-name: ${{ startsWith(matrix.os, 'ubuntu') && 'ubuntu' || 'macos' }}
        junit-file: junit.xml
        upload-coverage: 'false'

    - name: Upload performance test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results-${{ runner.os }}
        path: |
          junit.xml
          performance-tests-*.log
          tests.log
        retention-days: 7

  memory-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ubuntu
        extra-packages: valgrind

    - name: Build with AddressSanitizer
      run: |
        make -j CSTD=c2x sanitize
        make -j CSTD=c2x tests-sanitize

    - name: Run tests with AddressSanitizer
      run: |
        # Run tests with AddressSanitizer to detect memory issues
        LOG_FILE="sanitizer-tests.log"
        ./tests/scripts/run_tests.sh -b sanitize --log-file="${LOG_FILE}"
        echo "AddressSanitizer tests completed successfully"
        echo "Test logs saved to: ${LOG_FILE}"

    - name: Memory leak detection
      run: |
        # Additional memory leak checks
        echo "Running memory leak detection..."

        # Test basic binary functionality for leaks
        timeout --kill-after=3 10s valgrind --leak-check=full --error-exitcode=1 ./bin/server || true
        [ $? -eq 124 ] && echo "Server timed out" || false
        timeout --kill-after=3 10s valgrind --leak-check=full --error-exitcode=1 ./bin/client || true
        [ $? -eq 124 ] && echo "Client timed out" || false

        echo "Memory leak detection completed"

    - name: Upload memory test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: memory-test-results
        path: |
          sanitizer-tests.log
          tests.log
        retention-days: 7

  functional-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ${{ startsWith(matrix.os, 'ubuntu') && 'ubuntu' || 'macos' }}
        extra-packages: ${{ startsWith(matrix.os, 'macos') && 'coreutils' || '' }}

    - name: Build project
      run: |
        make -j CSTD=c2x debug

    - name: Test server startup and shutdown
      env:
        TERM: xterm-256color
      run: |
        # Set TERM for terminal detection in CI environment
        # Test server help (doesn't require terminal setup)
        ./bin/server --help
        # Test basic server startup (short timeout)
        timeout 2s ./bin/server --log-file /tmp/server_test.log || true
        echo "Server startup test passed"

    - name: Test client functionality
      env:
        TERM: xterm-256color
      run: |
        # Test client help (doesn't require webcam)
        timeout 3 ./bin/server || true
        # Test client capabilities detection
        ./bin/client --show-capabilities
