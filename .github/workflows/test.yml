name: Test Suite

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.c'
      - '**.h'
      - '**.m'
      - 'tests/**'
      - 'CMakeLists.txt'
  pull_request:
    branches: [ '*' ]
    paths:
      - '**.c'
      - '**.h'
      - '**.m'
      - 'tests/**'
      - 'CMakeLists.txt'

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]
        build_type: [debug, release]
        include:
          - os: ubuntu-latest
            os-name: ubuntu
          - os: macos-15
            os-name: macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ${{ matrix.os-name }}
        extra-packages: ${{ matrix.os-name == 'ubuntu' && 'lcov gcovr libc6-dbg' || 'gcovr' }}

    - name: Build test suite (${{ matrix.build_type }})
      run: |
        # Use CMake build system
        BUILD_TYPE=${{ matrix.build_type == 'debug' && 'Debug' || 'Release' }}

        # Set C flags based on build type
        if [ "${{ matrix.build_type }}" = "debug" ]; then
          C_FLAGS="-std=c2x --coverage"
        else
          C_FLAGS="-std=c2x"
        fi

        echo "Building with CMake build type: ${BUILD_TYPE}"
        CC=clang CXX=clang++ cmake -B build -G Ninja \
          -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
          -DCMAKE_C_STANDARD=23 \
          -DCMAKE_C_FLAGS="${C_FLAGS}" \
          -DBUILD_TESTS=ON
        cmake --build build

        echo "Test executables built:"
        ls -la build/bin/test_* 2>/dev/null || echo "No test executables found in build/bin/"
        echo "All files in build/bin:"
        ls -la build/bin/ 2>/dev/null || echo "build/bin/ directory not found"

        # Debug: Check if coverage build actually created .gcno files
        if [ "${{ matrix.build_type }}" = "debug" ]; then
          echo "DEBUG: Coverage build - checking for .gcno files..."
          echo "DEBUG: Count of .gcno files after build: $(find . -name "*.gcno" -type f | wc -l)"
          echo "DEBUG: Sample .gcno files:"
          find . -name "*.gcno" -type f | head -5
        fi

    - name: Run unit tests with JUnit XML generation
      run: |
        echo "Running tests with build type: ${{ matrix.build_type }}"
        echo "Looking for test executables:"
        find . -name "test_unit_*" -type f 2>/dev/null | head -10
        # Save logs with descriptive filename
        LOG_FILE="unit-tests-${{ matrix.os-name }}-${{ matrix.build_type }}.log"
        ./tests/scripts/run_tests.sh -t unit -b ${{ matrix.build_type }} -J --log-file="${LOG_FILE}"
        echo "Unit tests completed successfully"
        echo "Test logs saved to: ${LOG_FILE}"

    - name: Generate coverage report (debug builds only)
      if: always() && matrix.build_type == 'debug'
      run: |
        # Generate coverage files for codecov (coverage builds create .gcda files)
        echo "Looking for .gcda files to generate coverage from..."
        find . -name "*.gcda" -type f | head -10

        if find . -name "*.gcda" -type f | head -1 > /dev/null 2>&1; then
          echo "Found .gcda files, generating coverage..."

          # Debug: Check .gcno files
          echo "DEBUG: Checking .gcno files..."
          echo "DEBUG: Count of .gcno files: $(find . -name "*.gcno" -type f | wc -l)"
          echo "DEBUG: Sample .gcno files:"
          find . -name "*.gcno" -type f | head -5

          # Debug: Check .gcda files
          echo "DEBUG: Count of .gcda files: $(find . -name "*.gcda" -type f | wc -l)"
          echo "DEBUG: Sample .gcda files:"
          find . -name "*.gcda" -type f | head -5

          # Debug: Check if we have matching .gcno/.gcda pairs
          echo "DEBUG: Checking for matching .gcno/.gcda pairs..."
          for gcda in $(find . -name "*.gcda" -type f | head -3); do
            gcno="${gcda%.gcda}.gcno"
            echo "DEBUG: Checking pair: $gcda -> $gcno"
            if [ -f "$gcno" ]; then
              echo "DEBUG: ✅ Pair exists"
              ls -la "$gcno" "$gcda"
            else
              echo "DEBUG: ❌ Missing .gcno file for $gcda"
            fi
          done

          echo "DEBUG: Running coverage tool on .gcda files..."
          # Use gcov on macOS, llvm-cov on Ubuntu
          if [ "${{ matrix.os-name }}" = "macos" ]; then
            echo "DEBUG: Using gcov (macOS)"
            find . -name "*.gcda" -exec gcov {} \;
          else
            echo "DEBUG: Using llvm-cov (Ubuntu)"
            find . -name "*.gcda" -exec sh -c 'llvm-cov gcov "$1"' _ {} \;
          fi
          echo "DEBUG: Coverage command completed"

          # Debug: Check where .gcov files were created
          echo "DEBUG: Looking for .gcov files after coverage execution..."
          echo "DEBUG: All .gcov files found:"
          find . -name "*.gcov" -type f -exec ls -la {} \;
          echo "DEBUG: Count of .gcov files: $(find . -name "*.gcov" -type f | wc -l)"

          # Move all .gcov files to repo root for consistent behavior across platforms
          echo "Moving .gcov files to repo root..."
          echo "DEBUG: Before move - .gcov files in root: $(ls -la *.gcov 2>/dev/null | wc -l || echo 0)"
          find . -name "*.gcov" -type f -exec mv {} . \; || false
          echo "DEBUG: Move command completed"

          # Show what coverage files were generated
          echo "Generated coverage files:"
          echo "DEBUG: After move - .gcov files in root: $(ls -la *.gcov 2>/dev/null | wc -l || echo 0)"
          find . -name "*.gcov" -type f | head -20
          ls -la *.gcov 2>/dev/null
        else
          echo "No .gcda files found (this is expected for non-coverage builds)"
        fi

    - name: Publish Test Results and Coverage
      uses: ./.github/actions/publish-test-results
      if: always()
      with:
        test-type: unit
        os-name: ${{ matrix.os-name }}
        build-type: ${{ matrix.build_type }}
        junit-file: junit.xml
        coverage-files: './*.gcov'
        codecov-token: ${{ secrets.CODECOV_TOKEN }}
        upload-coverage: ${{ matrix.build_type == 'debug' && 'true' || 'false' }}

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ runner.os }}-${{ matrix.build_type }}
        path: |
          junit.xml
          unit-tests-*.log
          tests.log
        retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]
        include:
          - os: ubuntu-latest
            os-name: ubuntu
          - os: macos-15
            os-name: macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ${{ matrix.os-name }}
        extra-packages: ${{ matrix.os-name == 'ubuntu' && 'lcov gcovr' || 'gcovr' }}

    - name: Build and run integration tests with coverage
      run: |
        echo "Running integration tests with coverage build..."
        # Use CMake build system with coverage
        CC=clang CXX=clang++ cmake -B build -G Ninja \
          -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_STANDARD=23 \
          -DCMAKE_C_FLAGS='-std=c2x --coverage' -DBUILD_TESTS=ON
        cmake --build build
        LOG_FILE="integration-tests-${{ matrix.os-name }}.log"
        ./tests/scripts/run_tests.sh -t integration -b coverage -J --log-file="${LOG_FILE}"
        echo "Integration tests completed successfully"
        echo "Test logs saved to: ${LOG_FILE}"

    - name: Generate coverage report
      if: always()
      run: |
        # Generate coverage files for codecov
        echo "DEBUG: Running coverage tool on .gcda files..."
        # Use gcov on macOS, llvm-cov on Ubuntu
        if [ "${{ matrix.os-name }}" = "macos" ]; then
          echo "DEBUG: Using gcov (macOS)"
          find . -name "*.gcda" -exec gcov {} \;
        else
          echo "DEBUG: Using llvm-cov (Ubuntu)"
          find . -name "*.gcda" -exec sh -c 'llvm-cov gcov "$1"' _ {} \;
        fi
        echo "DEBUG: Coverage command completed"

        # Debug: Check where .gcov files were created
        echo "DEBUG: Looking for .gcov files after coverage execution..."
        echo "DEBUG: All .gcov files found:"
        find . -name "*.gcov" -type f -exec ls -la {} \;
        echo "DEBUG: Count of .gcov files: $(find . -name "*.gcov" -type f | wc -l)"

        # Move all .gcov files to repo root for consistent behavior across platforms
        echo "Moving .gcov files to repo root..."
        echo "DEBUG: Before move - .gcov files in root: $(ls -la *.gcov 2>/dev/null | wc -l || echo 0)"
        find . -name "*.gcov" -type f -exec mv {} . \;
        echo "DEBUG: Move command completed"

        echo "Generated coverage files:"
        echo "DEBUG: After move - .gcov files in root: $(ls -la *.gcov 2>/dev/null | wc -l || echo 0)"
        find . -name "*.gcov" -type f | head -20

    - name: Publish Test Results and Coverage
      uses: ./.github/actions/publish-test-results
      if: always()
      with:
        test-type: integration
        os-name: ${{ matrix.os-name }}
        junit-file: junit.xml
        coverage-files: './*.gcov'
        codecov-token: ${{ secrets.CODECOV_TOKEN }}
        upload-coverage: 'true'

    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-${{ runner.os }}
        path: |
          junit.xml
          integration-tests-*.log
          tests.log
        retention-days: 7

  performance-tests:
    name: Performance Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ${{ startsWith(matrix.os, 'ubuntu') && 'ubuntu' || 'macos' }}

    - name: Build and run performance tests with coverage
      run: |
        # Build and run performance tests with Release mode + coverage for accurate performance
        CC=clang CXX=clang++ cmake -B build -G Ninja \
          -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_STANDARD=23 \
          -DCMAKE_C_FLAGS='-std=c2x -O3 --coverage' -DBUILD_TESTS=ON
        cmake --build build
        LOG_FILE="performance-tests-${{ startsWith(matrix.os, 'ubuntu') && 'ubuntu' || 'macos' }}.log"
        ./tests/scripts/run_tests.sh -t performance -b release -J --log-file="${LOG_FILE}"
        echo "Performance tests completed successfully"
        echo "Test logs saved to: ${LOG_FILE}"

    - name: Generate coverage report for performance tests
      if: always()
      run: |
        # Generate coverage files for codecov
        echo "DEBUG: Running coverage tool on .gcda files..."
        # Use gcov on macOS, llvm-cov on Ubuntu
        if [ "${{ startsWith(matrix.os, 'macos') && 'macos' || 'ubuntu' }}" = "macos" ]; then
          echo "DEBUG: Using gcov (macOS)"
          find . -name "*.gcda" -exec gcov {} \;
        else
          echo "DEBUG: Using llvm-cov (Ubuntu)"
          find . -name "*.gcda" -exec sh -c 'llvm-cov gcov "$1"' _ {} \;
        fi
        echo "DEBUG: Coverage command completed"

        # Move all .gcov files to repo root for consistent behavior across platforms
        echo "Moving .gcov files to repo root..."
        find . -name "*.gcov" -type f -exec mv {} . \;
        echo "Generated coverage files:"
        find . -name "*.gcov" -type f | head -20

    - name: Publish Test Results and Coverage
      uses: ./.github/actions/publish-test-results
      if: always()
      with:
        test-type: performance
        os-name: ${{ startsWith(matrix.os, 'ubuntu') && 'ubuntu' || 'macos' }}
        junit-file: junit.xml
        coverage-files: './*.gcov'
        codecov-token: ${{ secrets.CODECOV_TOKEN }}
        upload-coverage: 'true'

    - name: Upload performance test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results-${{ runner.os }}
        path: |
          junit.xml
          performance-tests-*.log
          tests.log
        retention-days: 7

  memory-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ubuntu
        extra-packages: valgrind

    - name: Build with AddressSanitizer
      run: |
        # Use CMake build system with AddressSanitizer
        CC=clang CXX=clang++ cmake -B build -G Ninja \
          -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_STANDARD=23 \
          -DCMAKE_C_FLAGS='-std=c2x -fsanitize=address' -DBUILD_TESTS=ON
        cmake --build build

    - name: Run tests with AddressSanitizer
      run: |
        # Run tests with AddressSanitizer and other sanitizers to detect memory issues
        LOG_FILE="sanitizer-tests.log"
        ./tests/scripts/run_tests.sh -b debug --log-file="${LOG_FILE}"
        echo "AddressSanitizer tests completed successfully"
        echo "Test logs saved to: ${LOG_FILE}"

    - name: Memory leak detection
      run: |
        # Additional memory leak checks
        echo "Running memory leak detection..."

        # Test basic binary functionality for leaks
        timeout --kill-after=3 10s valgrind --leak-check=full --error-exitcode=1 ./build/bin/ascii-chat-server || true
        [ $? -eq 124 ] && echo "Server timed out" || false
        timeout --kill-after=3 10s valgrind --leak-check=full --error-exitcode=1 ./build/bin/ascii-chat-client || true
        [ $? -eq 124 ] && echo "Client timed out" || false

        echo "Memory leak detection completed"

    - name: Upload memory test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: memory-test-results
        path: |
          sanitizer-tests.log
          tests.log
        retention-days: 7

  functional-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ${{ startsWith(matrix.os, 'ubuntu') && 'ubuntu' || 'macos' }}
        extra-packages: ${{ startsWith(matrix.os, 'macos') && 'coreutils' || '' }}

    - name: Build project
      run: |
        # Use CMake build system
        CC=clang CXX=clang++ cmake -B build -G Ninja \
          -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_STANDARD=23 \
          -DCMAKE_C_FLAGS='-std=c2x' -DBUILD_TESTS=ON
        cmake --build build

    - name: Test server startup and shutdown
      env:
        TERM: xterm-256color
      run: |
        # Set TERM for terminal detection in CI environment
        # Test server help (doesn't require terminal setup)
        ./build/bin/ascii-chat-server --help
        # Test basic server startup (short timeout)
        timeout 2s ./build/bin/ascii-chat-server --log-file /tmp/server_test.log || true
        echo "Server startup test passed"

    - name: Test client functionality
      env:
        TERM: xterm-256color
      run: |
        # Test client help (doesn't require webcam)
        timeout 3 ./build/bin/ascii-chat-server || true
        # Test client capabilities detection
        ./build/bin/ascii-chat-client --show-capabilities
