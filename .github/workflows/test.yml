name: Test Suite

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.c'
      - '**.h'
      - '**.m'
      - 'tests/**'
      - 'Makefile'
  pull_request:
    branches: [ '*' ]
    paths:
      - '**.c'
      - '**.h'
      - '**.m'
      - 'tests/**'
      - 'Makefile'

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]
        build_type: [debug, release]
        include:
          - os: ubuntu-latest
            os-name: ubuntu
          - os: macos-15
            os-name: macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ${{ matrix.os-name }}
        extra-packages: ${{ matrix.os-name == 'ubuntu' && 'lcov gcovr libc6-dbg' || 'gcovr' }}

    - name: Build test suite (${{ matrix.build_type }})
      run: |
        make -j CSTD=c2x ${{ matrix.build_type }}
        make -j CSTD=c2x tests-${{ matrix.build_type }}

    - name: Run unit tests with JUnit XML generation
      run: |
        ./tests/scripts/run_tests.sh -t unit -b ${{ matrix.build_type }} -J
        echo "Unit tests completed successfully"

    - name: Generate coverage report (debug builds only)
      if: always() && matrix.build_type == 'debug'
      run: |
        # Generate coverage files for codecov
        find . -name "*.gcda" -exec gcov {} \;

        # Debug: Show what coverage files were generated
        echo "Generated coverage files:"
        find . -name "*.gcov" -type f | head -20
        ls -la *.gcov 2>/dev/null || echo "No .gcov files in root directory"

    - name: Publish Test Results and Coverage
      uses: ./.github/actions/publish-test-results
      if: always()
      with:
        test-type: unit
        os-name: ${{ matrix.os-name }}
        build-type: ${{ matrix.build_type }}
        junit-file: junit.xml
        coverage-files: './*.gcov'
        codecov-token: ${{ secrets.CODECOV_TOKEN }}
        upload-coverage: ${{ matrix.build_type == 'debug' && 'true' || 'false' }}

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ runner.os }}-${{ matrix.build_type }}
        path: |
          bin/test_*
          *.log
        retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]
        include:
          - os: ubuntu-latest
            os-name: ubuntu
          - os: macos-15
            os-name: macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ${{ matrix.os-name }}
        extra-packages: ${{ matrix.os-name == 'ubuntu' && 'lcov gcovr' || 'gcovr' }}

    - name: Build and run integration tests with coverage
      run: |
        echo "Running integration tests with release build and coverage..."
        make -j CSTD=c2x release-coverage
        make -j CSTD=c2x tests-release-coverage
        ./tests/scripts/run_tests.sh -t integration -b release-coverage -J
        echo "Integration tests completed successfully"

    - name: Generate coverage report
      if: always()
      run: |
        # Generate coverage files for codecov
        find . -name "*.gcda" -exec gcov {} \;
        echo "Generated coverage files:"
        find . -name "*.gcov" -type f | head -20

    - name: Publish Test Results and Coverage
      uses: ./.github/actions/publish-test-results
      if: always()
      with:
        test-type: integration
        os-name: ${{ matrix.os-name }}
        junit-file: junit.xml
        coverage-files: './*.gcov'
        codecov-token: ${{ secrets.CODECOV_TOKEN }}
        upload-coverage: 'true'

    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-${{ runner.os }}
        path: |
          bin/test_integration_*
          *.log
        retention-days: 7

  performance-tests:
    name: Performance Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ${{ startsWith(matrix.os, 'ubuntu') && 'ubuntu' || 'macos' }}
        extra-packages: ${{ startsWith(matrix.os, 'ubuntu') && 'lcov gcovr' || 'gcovr' }}

    - name: Build and run performance tests with coverage
      run: |
        # Build and run performance tests with coverage and JUnit XML output
        make -j CSTD=c2x debug-coverage
        make -j CSTD=c2x tests-debug-coverage
        ./tests/scripts/run_tests.sh -t performance -b debug-coverage -J
        echo "Performance tests completed successfully"

    - name: Generate coverage report
      if: always()
      run: |
        # Generate coverage files for codecov
        find . -name "*.gcda" -exec gcov {} \;
        echo "Generated coverage files:"
        find . -name "*.gcov" -type f | head -20

    - name: Publish Test Results and Coverage
      uses: ./.github/actions/publish-test-results
      if: always()
      with:
        test-type: performance
        os-name: ${{ startsWith(matrix.os, 'ubuntu') && 'ubuntu' || 'macos' }}
        junit-file: junit.xml
        coverage-files: './*.gcov'
        codecov-token: ${{ secrets.CODECOV_TOKEN }}
        upload-coverage: 'true'

  memory-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ubuntu
        extra-packages: valgrind

    - name: Build with AddressSanitizer
      run: |
        make -j CSTD=c2x sanitize
        make -j CSTD=c2x tests-sanitize

    - name: Run tests with AddressSanitizer
      run: |
        # Run tests with AddressSanitizer to detect memory issues
        ./tests/scripts/run_tests.sh -b sanitize
        echo "AddressSanitizer tests completed successfully"

    - name: Memory leak detection
      run: |
        # Additional memory leak checks
        echo "Running memory leak detection..."
        # Test basic binary functionality for leaks
        timeout 10s valgrind --leak-check=full --error-exitcode=1 ./bin/server || true
        timeout 10s valgrind --leak-check=full --error-exitcode=1 ./bin/client || true
        echo "Memory leak detection completed"

  functional-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ${{ startsWith(matrix.os, 'ubuntu') && 'ubuntu' || 'macos' }}
        extra-packages: ${{ startsWith(matrix.os, 'macos') && 'coreutils' || '' }}

    - name: Build project
      run: |
        make -j CSTD=c2x debug

    - name: Test server startup and shutdown
      env:
        TERM: xterm-256color
      run: |
        # Set TERM for terminal detection in CI environment
        # Test server help (doesn't require terminal setup)
        ./bin/server --help
        # Test basic server startup (short timeout)
        timeout 2s ./bin/server --log-file /tmp/server_test.log || true
        echo "Server startup test passed"

    - name: Test client functionality
      env:
        TERM: xterm-256color
      run: |
        # Test client help (doesn't require webcam)
        timeout 3 ./bin/server || true
        # Test client capabilities detection
        ./bin/client --show-capabilities
