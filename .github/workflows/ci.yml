name: CI

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.c'
      - '**.h'
      - '**.m'
  pull_request:
    branches: [ '*' ]
    paths:
      - '**.c'
      - '**.h'
      - '**.m'

jobs:

  memory-check:
    name: Memory Safety Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      uses: ./.github/actions/install-deps
      with:
        os: ubuntu
        extra-packages: 'libc6-dbg valgrind'

    - name: Run tests with AddressSanitizer
      run: |
        # Use CMake build system
        CC=clang CXX=clang++ cmake -B build -G Ninja \
          -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_STANDARD=23 \
          -DCMAKE_C_FLAGS='-std=c2x' -DBUILD_TESTS=ON
        cmake --build build
        ./tests/scripts/run_tests.sh -t unit -b debug

  static-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ubuntu
        extra-packages: clang-tools

    - name: Run static analysis
      run: |
        # Build with CMake for static analysis
        CC=clang CXX=clang++ cmake -B build -G Ninja \
          -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_STANDARD=23 \
          -DCMAKE_C_FLAGS='-std=c2x' -DBUILD_TESTS=ON
        # Run clang-tidy on source files
        find src lib -name "*.c" -exec clang-tidy {} -- -std=c2x \;
        # Run clang static analyzer
        scan-build cmake --build build || true

    - name: Check for memory leaks patterns
      run: |
        # Simple grep-based checks for common memory leak patterns
        echo "Checking for potential memory leaks..."
        ! grep -n "malloc\|calloc\|realloc" *.c | grep -v "free\|DEBUG_MEMORY"
        echo "Memory leak check completed"

  format-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies with caching
      uses: ./.github/actions/install-deps
      with:
        os: ubuntu
        extra-packages: clang-format make

    - name: Check code formatting
      run: |
        # Check if code follows consistent formatting
        find src lib tests -name "*.c" -o -name "*.h" | xargs clang-format --dry-run -Werror
