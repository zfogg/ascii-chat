# Makefile for SIMD ASCII Optimization
CC = clang
BASE_CFLAGS = -Wall -Wextra -O3 -std=c23 -I../lib -D_GNU_SOURCE

# =============================================================================
# SIMD Flags
# =============================================================================
# Detect CPU/OS for reasonable defaults (build-host only)
UNAME_M := $(shell uname -m)
UNAME_S := $(shell uname -s)

# macOS specifics: detect Apple Silicon and Rosetta
ifeq ($(UNAME_S),Darwin)
  IS_APPLE_SILICON := $(shell sysctl -n hw.optional.arm64 2>/dev/null || echo 0)
  IS_ROSETTA       := $(shell sysctl -n sysctl.proc_translated 2>/dev/null || echo 0)
endif

# Force arm64 when building natively on Apple Silicon (not under Rosetta)
ifeq ($(UNAME_S),Darwin)
  ifeq ($(IS_APPLE_SILICON),1)
    ifneq ($(IS_ROSETTA),1)
      ARCH_FLAGS := -arch arm64
      $(info Forcing arm64 build on Apple Silicon)
    endif
  endif
endif

# User override controls
# SIMD_MODE can be one of: auto, off, sse2, avx2, neon, native
SIMD_MODE ?= auto

# Decide an effective mode: either user-provided or autodetected
# Autodetect chooses a conservative baseline suitable for distribution.
ifeq ($(SIMD_MODE),auto)
  # Compute SIMD_MODE_AUTO based on OS/arch; Rosetta counts as x86_64.
  ifeq ($(UNAME_S),Darwin)
    ifeq ($(IS_ROSETTA),1)
      SIMD_MODE_AUTO := ssse3
    else ifeq ($(IS_APPLE_SILICON),1)
      SIMD_MODE_AUTO := neon
    else
      SIMD_MODE_AUTO := ssse3
    endif
  else ifneq (,$(filter aarch64 arm64,$(UNAME_M)))
    SIMD_MODE_AUTO := neon
  else ifeq ($(UNAME_M),x86_64)
    SIMD_MODE_AUTO := ssse3
  else ifeq ($(UNAME_M),aarch64)
    SIMD_MODE_AUTO := native
  else
    SIMD_MODE_AUTO := off
  endif
else
  SIMD_MODE_AUTO := $(SIMD_MODE)
endif

# Map the effective mode to compiler flags (single table)
ifneq (,$(filter $(SIMD_MODE_AUTO),off))
  $(info Building without SIMD (scalar))
else ifneq (,$(filter $(SIMD_MODE_AUTO),sse2))
  $(info Using SSE2 baseline)
  SIMD_CFLAGS := -DSIMD_SUPPORT -DSIMD_SUPPORT_SSE2 -msse2
else ifneq (,$(filter $(SIMD_MODE_AUTO),ssse3))
  $(info Using SSSE3 with 32-pixel processing)
  SIMD_CFLAGS := -DSIMD_SUPPORT -DSIMD_SUPPORT_SSSE3 -mssse3
else ifneq (,$(filter $(SIMD_MODE_AUTO),avx2))
  $(info Using AVX2 (ensure target CPUs support it)
  SIMD_CFLAGS := -DSIMD_SUPPORT -DSIMD_SUPPORT_AVX2 -mavx2
else ifneq (,$(filter $(SIMD_MODE_AUTO),neon))
  $(info Using ARM NEON)
  SIMD_CFLAGS := -DSIMD_SUPPORT -DSIMD_SUPPORT_NEON
else ifneq (,$(filter $(SIMD_MODE_AUTO),native))
  $(info Using -march=native (build-host only))
  SIMD_CFLAGS := -DSIMD_SUPPORT -march=native
else
  $(info Unknown architecture $(UNAME_M); building without SIMD)
  SIMD_CFLAGS :=
endif

override CFLAGS += $(BASE_CFLAGS) $(ARCH_FLAGS) $(SIMD_CFLAGS)

override LDFLAGS := -lm

# Platform LDFLAGS for webcam backends when needed
ifeq ($(UNAME_S),Darwin)
  PLATFORM_LDFLAGS := -framework Foundation -framework AVFoundation -framework CoreMedia -framework CoreVideo
else ifeq ($(UNAME_S),Linux)
  PLATFORM_LDFLAGS :=
else
  PLATFORM_LDFLAGS :=
endif

# Link against main project's object files (webcam backend is platform-specific)
COMMON_MAIN_OBJECTS = \
  ../build/lib/ascii_simd.o \
  ../build/lib/ascii_simd_color.o \
  ../build/lib/ascii_simd_neon.o \
  ../build/lib/ansi_fast.o \
  ../build/lib/logging.o \
  ../build/lib/buffer_pool.o \
  ../build/lib/common.o \
  ../build/lib/options.o \
  ../build/lib/image.o

# Webcam objects (core + platform backends)
WEBCAM_CORE_OBJECTS := ../build/lib/webcam.o ../build/lib/webcam_platform.o

# Platform-specific webcam backends (explicitly include based on OS)
ifeq ($(UNAME_S),Darwin)
  WEBCAM_BACKEND_OBJECTS := ../build/lib/webcam_avfoundation.o
else ifeq ($(UNAME_S),Linux)
  WEBCAM_BACKEND_OBJECTS := ../build/lib/webcam_v4l2.o
else
  WEBCAM_BACKEND_OBJECTS :=
endif

# Link webcam core/backends into ascii_simd_test only (ansi_fast_test has no webcam deps)
MAIN_PROJECT_OBJECTS = $(COMMON_MAIN_OBJECTS)

# Source files for test programs (only test files, use main project objects for libraries)
ASCII_SIMD_TEST_SOURCES = ascii_simd_test.c
ANSI_FAST_TEST_SOURCES = ansi_fast_test.c
COLOR_CORRECTNESS_TEST_SOURCES = color_correctness_test.c

# Object files for test programs
ASCII_SIMD_TEST_OBJECTS = $(ASCII_SIMD_TEST_SOURCES:.c=.o)
ANSI_FAST_TEST_OBJECTS = $(ANSI_FAST_TEST_SOURCES:.c=.o)
COLOR_CORRECTNESS_TEST_OBJECTS = $(COLOR_CORRECTNESS_TEST_SOURCES:.c=.o)

# Executables
ASCII_SIMD_EXECUTABLE = ascii_simd_test
ANSI_FAST_EXECUTABLE = ansi_fast_test
COLOR_CORRECTNESS_EXECUTABLE = color_correctness_test

# First ensure main project objects are built
ensure-main-objects:
	@echo "Ensuring main project objects are built (clean, isolated flags, NEON-friendly)..."
	@cd .. && $(MAKE) clean && $(MAKE) release SIMD_MODE=$(SIMD_MODE_AUTO) CRC32_HW=$(CRC32_HW) AES_HW=$(AES_HW) CFLAGS= OBJCFLAGS=

# Targets
all: ensure-main-objects $(ASCII_SIMD_EXECUTABLE) $(ANSI_FAST_EXECUTABLE) $(COLOR_CORRECTNESS_EXECUTABLE)
	@echo "Built all test programs with: $(SIMD_CFLAGS)"

$(ASCII_SIMD_EXECUTABLE): $(ASCII_SIMD_TEST_OBJECTS) | ensure-main-objects
	@echo "Linking $@ with main project SIMD objects..."
	$(CC) $(ASCII_SIMD_TEST_OBJECTS) $(MAIN_PROJECT_OBJECTS) $(WEBCAM_CORE_OBJECTS) $(WEBCAM_BACKEND_OBJECTS) -o $@ $(LDFLAGS) $(PLATFORM_LDFLAGS)

# ANSI fast test needs ansi_fast.c compiled separately
$(ANSI_FAST_EXECUTABLE): $(ANSI_FAST_TEST_OBJECTS) ../build/lib/ansi_fast.o | ensure-main-objects
	@echo "Linking $@ with optimized ANSI generation..."
	$(CC) $(ANSI_FAST_TEST_OBJECTS) ../build/lib/ansi_fast.o ../build/lib/logging.o ../build/lib/common.o -o $@ $(LDFLAGS)

$(COLOR_CORRECTNESS_EXECUTABLE): $(COLOR_CORRECTNESS_TEST_OBJECTS) | ensure-main-objects
	@echo "Linking $@ with main project SIMD objects..."
	$(CC) $(COLOR_CORRECTNESS_TEST_OBJECTS) $(MAIN_PROJECT_OBJECTS) $(WEBCAM_CORE_OBJECTS) $(WEBCAM_BACKEND_OBJECTS) -o $@ $(LDFLAGS) $(PLATFORM_LDFLAGS)

# Compile ansi_fast.c
../build/lib/ansi_fast.o: ../lib/ansi_fast.c ../lib/ansi_fast.h
	@echo "Compiling ansi_fast.c..."
	$(CC) $(CFLAGS) -c ../lib/ansi_fast.c -o ../build/lib/ansi_fast.o



# Individual targets for convenience
ascii_simd_test: $(ASCII_SIMD_EXECUTABLE)

ansi_fast_test: $(ANSI_FAST_EXECUTABLE)

color_correctness_test: $(COLOR_CORRECTNESS_EXECUTABLE)

%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

# Test different compilation modes (these compile and link separately for comparison)
test-scalar: ensure-main-objects
	@echo "Building scalar test programs..."
	$(CC) $(BASE_CFLAGS) ascii_simd_test.c ../lib/ascii_simd.c ../lib/logging.c -o $(ASCII_SIMD_EXECUTABLE)_scalar $(LDFLAGS)
	@echo "Built scalar-only versions"

test-sse2: ensure-main-objects
	@echo "Building SSE2 test programs..."
	$(CC) $(BASE_CFLAGS) -DSIMD_SUPPORT -DSIMD_SUPPORT_SSE2 -msse2 ascii_simd_test.c ../lib/ascii_simd.c ../lib/logging.c -o $(ASCII_SIMD_EXECUTABLE)_sse2 $(LDFLAGS)
	@echo "Built SSE2 versions"

test-neon: ensure-main-objects
	@echo "Building NEON test programs..."
	$(CC) $(BASE_CFLAGS) -DSIMD_SUPPORT -DSIMD_SUPPORT_NEON ascii_simd_test.c ../lib/ascii_simd.c ../lib/logging.c -o $(ASCII_SIMD_EXECUTABLE)_neon $(LDFLAGS)
	@echo "Built NEON versions"

test-all: test-scalar test-sse2 test-neon
	@echo "Built all variants for comparison"

# Run benchmarks
benchmark: $(ASCII_SIMD_EXECUTABLE)
	@echo "Running basic SIMD benchmark..."
	./$(ASCII_SIMD_EXECUTABLE)

# Test non-SIMD colored ASCII with ansi_fast.c optimizations
benchmark-nonsimd: benchmark_nonsimd
	@echo "Testing non-SIMD with ansi_fast.c optimizations..."
	./benchmark_nonsimd

benchmark_nonsimd: benchmark_nonsimd.o | ensure-main-objects
	@echo "Linking non-SIMD benchmark..."
	$(CC) benchmark_nonsimd.o $(MAIN_PROJECT_OBJECTS) -o benchmark_nonsimd $(LDFLAGS)

benchmark-ansi-fast: $(ANSI_FAST_EXECUTABLE)
	@echo "Running optimized ANSI string generation benchmark..."
	./$(ANSI_FAST_EXECUTABLE)

benchmark-all: benchmark benchmark-ansi-fast
	@echo "All benchmarks complete"

# Clean targets
clean:
	rm -f $(ASCII_SIMD_TEST_OBJECTS) \
	  $(ANSI_FAST_TEST_OBJECTS) \
	  $(ASCII_SIMD_EXECUTABLE) \
	  $(ANSI_FAST_EXECUTABLE) \
	  $(ASCII_SIMD_EXECUTABLE) \
	  $(COLOR_CORRECTNESS_EXECUTABLE) \
	  $(COLOR_CORRECTNESS_TEST_OBJECTS) \
	  *.o \
	  ../lib/ansi_fast.o

# Show compilation info
info:
	@echo "System: $(UNAME_S) $(UNAME_M)"
	@echo "Compiler: $(CC)"
	@echo "SIMD flags: $(SIMD_CFLAGS)"
	@echo "Full CFLAGS: $(CFLAGS)"

# Help
help:
	@echo "Available targets:"
	@echo "  all               - Build all test programs linking with main project SIMD objects"
	@echo "  ascii_simd_test   - Build basic SIMD test program"
	@echo "  ansi_fast_test    - Build optimized ANSI string generation test"
	@echo "  test-scalar       - Build scalar-only versions (separate compilation)"
	@echo "  test-sse2         - Build SSE2 versions (separate compilation)"
	@echo "  test-neon         - Build NEON versions (separate compilation)"
	@echo "  test-all          - Build all versions for comparison"
	@echo "  benchmark         - Run basic SIMD benchmark"
	@echo "  benchmark-ansi-fast - Run optimized ANSI string benchmark"
	@echo "  benchmark-all     - Run all benchmarks"
	@echo "  clean             - Remove build files"
	@echo "  info              - Show compilation information"
	@echo "  help              - Show this help"
	@echo ""
	@echo "NEW: ansi_fast_test implements ChatGPT's optimization recommendations:"
	@echo "     - Precomputed decimal lookup table (dec3[])"
	@echo "     - memcpy-based ANSI generation (no snprintf)"
	@echo "     - Run-length color encoding (emit SGR only on change)"
	@echo "     - Two pixels per cell using â–€ character"
	@echo "     - Single write() batching for entire frame"
	@echo "     - Separate timing measurements (pixel/string/output)"
	@echo ""
	@echo "NOTE: Default targets link against main project's SIMD-optimized objects."
	@echo "      Use test-* targets to build with independent compilation for comparison."

.PHONY: all ascii_simd_test ansi_fast_test ensure-main-objects test-scalar test-sse2 test-neon test-all benchmark benchmark-ansi-fast benchmark-all clean info help
